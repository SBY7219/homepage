#lang racket
(provide computation_structures.html)
(require SMathML)
(define computation_structures.html
  (TmPrelude
   #:title "Computation Structures笔记"
   #:css "styles.css"
   (H1 "Computation Structures笔记")
   (H2 "第1章 数字抽象")
   (P ""
      )
   (H3 "第1.1节 信息和数字抽象")
   
   (H3 "第1.2节 离散变量的表示")
   
   (H3 "第1.3节 组合设备")
   (P "组合设备是数字工程领域中最简单也最根本性的抽象, 其可以被我们形式化如下. "
      "一个组合设备是具有以下性质的电路元素:"
      (Ul (Li "一个或多个离散值输入端子;")
          (Li "一个或多个离散值输出端子;")
          (Li "一个函数式描述, 刻画了每个可能的输入值组合所对应的每个输出的值;")
          (Li "一个时延描述, (至少)包含有从任意输入值组合中设备"
              "计算出所刻画的输出值所用的时间上界" (_ $t 'pd) "."))
      "传播延迟 (propagation delay) " (_ $t 'pd) "的通常解释为, 每当特定的输入值"
      "组合应用于设备并维持至少" (_ $t 'pd) "秒, 那么相应的输出值集合就会出现. 而且, "
      "这些输出值至少在输出端能够维持到输入改变的时候. 因此, 一集输入值应用" $t
      "秒将导致相应的输出值至少维持" (&- $t (_ $t 'pd)) "秒. 注意一下, " (_ $t 'pd)
      "是新输入值反映到输出端所需的最大用时, 一般而言最小用时默认为零. 后一个假设"
      "带来的后果之一在于输出值总是立即被任何输入的改变所污染, 不管" (_ $t 'pd)
      "如何." (Br)
      "组合设备的重要性质在于其互联以合成新的组合函数的简单性. "
      "特别地, 新的组合设备可由组合无环路电路中的组合元素得到, "
      "只要小心不将输出连接在一起. 更精确地说, 我们可以利用基本的复合规则"
      "构造组合设备:"
      
      )
   (H2 "第2章 二进制表示与记号")
   (P $n "(二进制)位可表示" (^ $2 $n) "个状态. "
      "对于通常的二进制表示" (: (_ $b (&- $n $1)) $..h $b_0)
      ", 其代表了值" (sum (&= $i $0) (&- $n $1) (&d* $b_i (^ $2 $i)))
      ". 如果我们在想象中为某个固定的间隙插入了小数点, 那么就如同通常的十进制那样, "
      "可以表示一些有理数, 这就是所谓的定点表示.")
   (P "表示有符号的整数的话, 主要有三种约定, 即2's complement, 1's complement和"
      "sign/magnitude. 这三种表示的最高位都用来指示正负, " (Code "0")
      "表示正, " (Code "1") "表示负. 正数的情况下, 都是通常的无符号表示.")
   (P "或许最直接的方式就是sign/magnitude. 除了最高位指示正负之外, 其余位就和通常表示一样"
      "指示大小. 例如, " (Code "1101") "可以表示" (&- $5) ". ")
   (P "对于1's complement表示而言, 负数的话, 在sign/magnitude的基础之上, 除了最高位全部取反, "
      "即" (Code "0") "变成" (Code "1") ", " (Code "1") "变成" (Code "0") ". 例如, "
      (Code "1010") "可以表示" (&- $5) "."
      )
   (H2 "第3章 组合设备与电路")

   (H2 "第4章 序列和状态")

   (H2 "第5章 数字系统的合成")
   
   (H2 "第6章 有限状态机器")

   (H2 "第7章 控制结构与自律")

   (H2 "第8章 性能度量与取舍")

   
   ))